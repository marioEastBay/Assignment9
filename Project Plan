Group 3: Abia Khan and Mario Salinas
NetID: ac6212 and ry7931 
CS 301-03 
11/8/23


Assignment 9 Project Plan


Test cases: 13
We tested the main.cpp file (driver) that stores a series of numbers in the binary search tree. 


Expectations: 
We expect the program to read the values from the file input1.txt and display the content on the screen. 
The file contains 100 elements. The values are dequeued and displayed on the screen.
We expect the program to run successfully and that the values/elements are displayed properly on the screen. 


Class names: Node, BST 

Functions: while, if-else, Queue, Dequeue, ifstream 


Logic we tried to implement:

// Group 3: Abia Khan and Mario Salinas
// NetID: ac6212 and ry7931 
// Work Cited: Dale, Nell. C++ Plus Data Structures, 6th Edition.
// CS 301-03 
// 11/8/23


#include <iostream>
#include <fstream>
#include <queue>

using namespace std;

// Node class for BST
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Binary Search Tree Class
class BST {
    Node* root;

    // Inorder traversal to fill the queue
    void inorderTraversal(Node* node, queue<int> &q) {
        if (node == nullptr) return;
        inorderTraversal(node->left, q);
        q.push(node->data);
        inorderTraversal(node->right, q);
    }

public:
    BST() : root(nullptr) {}

    // Function to insert a value into BST
    void insert(int val) {
        if (root == nullptr) {
            root = new Node(val);
            return;
        }
        Node* temp = root;
        Node* parent = nullptr;

        while (temp != nullptr) {
            parent = temp;
            if (val < temp->data) {
                temp = temp->left;
            } else {
                temp = temp->right;
            }
        }

        if (val < parent->data) {
            parent->left = new Node(val);
        } else {
            parent->right = new Node(val);
        }
    }

    // Function to fill a queue with BST elements using inorder traversal
    void fillQueue(queue<int> &q) {
        inorderTraversal(root, q);
    }
};

int main() {
    ifstream inputFile("input1.txt"); // Assuming numbers.txt contains the numbers.
    int num;
    BST bst;
    queue<int> q;

    // Read from file and insert values into BST
    if (inputFile.is_open()) {
        while (inputFile >> num) {
            cout << "Reading from file: " << num << endl;
            bst.insert(num);
        }
        inputFile.close();
    } else {
        cout << "Unable to open file" << endl;
        return 1;
    }

    // Fill the queue with BST elements and display them
    bst.fillQueue(q);

    cout << "\nDequeue and Display:\n";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;

    return 0;
}
